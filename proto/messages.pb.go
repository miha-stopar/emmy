// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messages.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	messages.proto
	services.proto

It has these top-level messages:
	Message
	ServiceInfo
	Status
	BigInt
	DoubleBigInt
	PedersenFirst
	PedersenDecommitment
	ECGroupElement
	Pair
	SchnorrProofRandomData
	SchnorrProofData
	FiatShamir
	FiatShamirAlsoNeg
	SchnorrECProofRandomData
	PseudonymsysNymGenProofRandomData
	PseudonymsysNymGenProofRandomDataEC
	PseudonymsysCACertificate
	PseudonymsysCACertificateEC
	PseudonymsysIssueProofRandomData
	PseudonymsysIssueProofRandomDataEC
	PseudonymsysTranscript
	PseudonymsysTranscriptEC
	PseudonymsysCredential
	PseudonymsysCredentialEC
	PseudonymsysTransferCredentialData
	PseudonymsysTransferCredentialDataEC
	CSPaillierSecretKey
	CSPaillierPubKey
	SessionKey
	CLCredReq
	CLCredential
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/golang/protobuf/ptypes/empty"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// A generic message
type Message struct {
	// Types that are valid to be assigned to Content:
	//	*Message_Bigint
	//	*Message_EcGroupElement
	//	*Message_Status
	//	*Message_PedersenFirst
	//	*Message_PedersenDecommitment
	//	*Message_SchnorrProofData
	//	*Message_SchnorrProofRandomData
	//	*Message_SchnorrEcProofRandomData
	//	*Message_PseudonymsysCaCertificate
	//	*Message_PseudonymsysNymGenProofRandomData
	//	*Message_PseudonymsysIssueProofRandomData
	//	*Message_DoubleBigint
	//	*Message_PseudonymsysTransferCredentialData
	//	*Message_PseudonymsysCaCertificateEc
	//	*Message_PseudonymsysNymGenProofRandomDataEc
	//	*Message_PseudonymsysIssueProofRandomDataEc
	//	*Message_PseudonymsysTransferCredentialDataEc
	//	*Message_SessionKey
	//	*Message_CLCredReq
	//	*Message_CLCredential
	Content  isMessage_Content `protobuf_oneof:"content"`
	ClientId int32             `protobuf:"varint,28,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto1.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_Content interface {
	isMessage_Content()
}

type Message_Bigint struct {
	Bigint *BigInt `protobuf:"bytes,4,opt,name=bigint,oneof"`
}
type Message_EcGroupElement struct {
	EcGroupElement *ECGroupElement `protobuf:"bytes,5,opt,name=ec_group_element,json=ecGroupElement,oneof"`
}
type Message_Status struct {
	Status *Status `protobuf:"bytes,6,opt,name=status,oneof"`
}
type Message_PedersenFirst struct {
	PedersenFirst *PedersenFirst `protobuf:"bytes,7,opt,name=pedersen_first,json=pedersenFirst,oneof"`
}
type Message_PedersenDecommitment struct {
	PedersenDecommitment *PedersenDecommitment `protobuf:"bytes,8,opt,name=pedersen_decommitment,json=pedersenDecommitment,oneof"`
}
type Message_SchnorrProofData struct {
	SchnorrProofData *SchnorrProofData `protobuf:"bytes,9,opt,name=schnorr_proof_data,json=schnorrProofData,oneof"`
}
type Message_SchnorrProofRandomData struct {
	SchnorrProofRandomData *SchnorrProofRandomData `protobuf:"bytes,10,opt,name=schnorr_proof_random_data,json=schnorrProofRandomData,oneof"`
}
type Message_SchnorrEcProofRandomData struct {
	SchnorrEcProofRandomData *SchnorrECProofRandomData `protobuf:"bytes,11,opt,name=schnorr_ec_proof_random_data,json=schnorrEcProofRandomData,oneof"`
}
type Message_PseudonymsysCaCertificate struct {
	PseudonymsysCaCertificate *PseudonymsysCACertificate `protobuf:"bytes,15,opt,name=pseudonymsys_ca_certificate,json=pseudonymsysCaCertificate,oneof"`
}
type Message_PseudonymsysNymGenProofRandomData struct {
	PseudonymsysNymGenProofRandomData *PseudonymsysNymGenProofRandomData `protobuf:"bytes,16,opt,name=pseudonymsys_nym_gen_proof_random_data,json=pseudonymsysNymGenProofRandomData,oneof"`
}
type Message_PseudonymsysIssueProofRandomData struct {
	PseudonymsysIssueProofRandomData *PseudonymsysIssueProofRandomData `protobuf:"bytes,17,opt,name=pseudonymsys_issue_proof_random_data,json=pseudonymsysIssueProofRandomData,oneof"`
}
type Message_DoubleBigint struct {
	DoubleBigint *DoubleBigInt `protobuf:"bytes,18,opt,name=double_bigint,json=doubleBigint,oneof"`
}
type Message_PseudonymsysTransferCredentialData struct {
	PseudonymsysTransferCredentialData *PseudonymsysTransferCredentialData `protobuf:"bytes,19,opt,name=pseudonymsys_transfer_credential_data,json=pseudonymsysTransferCredentialData,oneof"`
}
type Message_PseudonymsysCaCertificateEc struct {
	PseudonymsysCaCertificateEc *PseudonymsysCACertificateEC `protobuf:"bytes,20,opt,name=pseudonymsys_ca_certificate_ec,json=pseudonymsysCaCertificateEc,oneof"`
}
type Message_PseudonymsysNymGenProofRandomDataEc struct {
	PseudonymsysNymGenProofRandomDataEc *PseudonymsysNymGenProofRandomDataEC `protobuf:"bytes,21,opt,name=pseudonymsys_nym_gen_proof_random_data_ec,json=pseudonymsysNymGenProofRandomDataEc,oneof"`
}
type Message_PseudonymsysIssueProofRandomDataEc struct {
	PseudonymsysIssueProofRandomDataEc *PseudonymsysIssueProofRandomDataEC `protobuf:"bytes,22,opt,name=pseudonymsys_issue_proof_random_data_ec,json=pseudonymsysIssueProofRandomDataEc,oneof"`
}
type Message_PseudonymsysTransferCredentialDataEc struct {
	PseudonymsysTransferCredentialDataEc *PseudonymsysTransferCredentialDataEC `protobuf:"bytes,23,opt,name=pseudonymsys_transfer_credential_data_ec,json=pseudonymsysTransferCredentialDataEc,oneof"`
}
type Message_SessionKey struct {
	SessionKey *SessionKey `protobuf:"bytes,30,opt,name=SessionKey,oneof"`
}
type Message_CLCredReq struct {
	CLCredReq *CLCredReq `protobuf:"bytes,31,opt,name=CLCredReq,oneof"`
}
type Message_CLCredential struct {
	CLCredential *CLCredential `protobuf:"bytes,32,opt,name=CLCredential,oneof"`
}

func (*Message_Bigint) isMessage_Content()                               {}
func (*Message_EcGroupElement) isMessage_Content()                       {}
func (*Message_Status) isMessage_Content()                               {}
func (*Message_PedersenFirst) isMessage_Content()                        {}
func (*Message_PedersenDecommitment) isMessage_Content()                 {}
func (*Message_SchnorrProofData) isMessage_Content()                     {}
func (*Message_SchnorrProofRandomData) isMessage_Content()               {}
func (*Message_SchnorrEcProofRandomData) isMessage_Content()             {}
func (*Message_PseudonymsysCaCertificate) isMessage_Content()            {}
func (*Message_PseudonymsysNymGenProofRandomData) isMessage_Content()    {}
func (*Message_PseudonymsysIssueProofRandomData) isMessage_Content()     {}
func (*Message_DoubleBigint) isMessage_Content()                         {}
func (*Message_PseudonymsysTransferCredentialData) isMessage_Content()   {}
func (*Message_PseudonymsysCaCertificateEc) isMessage_Content()          {}
func (*Message_PseudonymsysNymGenProofRandomDataEc) isMessage_Content()  {}
func (*Message_PseudonymsysIssueProofRandomDataEc) isMessage_Content()   {}
func (*Message_PseudonymsysTransferCredentialDataEc) isMessage_Content() {}
func (*Message_SessionKey) isMessage_Content()                           {}
func (*Message_CLCredReq) isMessage_Content()                            {}
func (*Message_CLCredential) isMessage_Content()                         {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetBigint() *BigInt {
	if x, ok := m.GetContent().(*Message_Bigint); ok {
		return x.Bigint
	}
	return nil
}

func (m *Message) GetEcGroupElement() *ECGroupElement {
	if x, ok := m.GetContent().(*Message_EcGroupElement); ok {
		return x.EcGroupElement
	}
	return nil
}

func (m *Message) GetStatus() *Status {
	if x, ok := m.GetContent().(*Message_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Message) GetPedersenFirst() *PedersenFirst {
	if x, ok := m.GetContent().(*Message_PedersenFirst); ok {
		return x.PedersenFirst
	}
	return nil
}

func (m *Message) GetPedersenDecommitment() *PedersenDecommitment {
	if x, ok := m.GetContent().(*Message_PedersenDecommitment); ok {
		return x.PedersenDecommitment
	}
	return nil
}

func (m *Message) GetSchnorrProofData() *SchnorrProofData {
	if x, ok := m.GetContent().(*Message_SchnorrProofData); ok {
		return x.SchnorrProofData
	}
	return nil
}

func (m *Message) GetSchnorrProofRandomData() *SchnorrProofRandomData {
	if x, ok := m.GetContent().(*Message_SchnorrProofRandomData); ok {
		return x.SchnorrProofRandomData
	}
	return nil
}

func (m *Message) GetSchnorrEcProofRandomData() *SchnorrECProofRandomData {
	if x, ok := m.GetContent().(*Message_SchnorrEcProofRandomData); ok {
		return x.SchnorrEcProofRandomData
	}
	return nil
}

func (m *Message) GetPseudonymsysCaCertificate() *PseudonymsysCACertificate {
	if x, ok := m.GetContent().(*Message_PseudonymsysCaCertificate); ok {
		return x.PseudonymsysCaCertificate
	}
	return nil
}

func (m *Message) GetPseudonymsysNymGenProofRandomData() *PseudonymsysNymGenProofRandomData {
	if x, ok := m.GetContent().(*Message_PseudonymsysNymGenProofRandomData); ok {
		return x.PseudonymsysNymGenProofRandomData
	}
	return nil
}

func (m *Message) GetPseudonymsysIssueProofRandomData() *PseudonymsysIssueProofRandomData {
	if x, ok := m.GetContent().(*Message_PseudonymsysIssueProofRandomData); ok {
		return x.PseudonymsysIssueProofRandomData
	}
	return nil
}

func (m *Message) GetDoubleBigint() *DoubleBigInt {
	if x, ok := m.GetContent().(*Message_DoubleBigint); ok {
		return x.DoubleBigint
	}
	return nil
}

func (m *Message) GetPseudonymsysTransferCredentialData() *PseudonymsysTransferCredentialData {
	if x, ok := m.GetContent().(*Message_PseudonymsysTransferCredentialData); ok {
		return x.PseudonymsysTransferCredentialData
	}
	return nil
}

func (m *Message) GetPseudonymsysCaCertificateEc() *PseudonymsysCACertificateEC {
	if x, ok := m.GetContent().(*Message_PseudonymsysCaCertificateEc); ok {
		return x.PseudonymsysCaCertificateEc
	}
	return nil
}

func (m *Message) GetPseudonymsysNymGenProofRandomDataEc() *PseudonymsysNymGenProofRandomDataEC {
	if x, ok := m.GetContent().(*Message_PseudonymsysNymGenProofRandomDataEc); ok {
		return x.PseudonymsysNymGenProofRandomDataEc
	}
	return nil
}

func (m *Message) GetPseudonymsysIssueProofRandomDataEc() *PseudonymsysIssueProofRandomDataEC {
	if x, ok := m.GetContent().(*Message_PseudonymsysIssueProofRandomDataEc); ok {
		return x.PseudonymsysIssueProofRandomDataEc
	}
	return nil
}

func (m *Message) GetPseudonymsysTransferCredentialDataEc() *PseudonymsysTransferCredentialDataEC {
	if x, ok := m.GetContent().(*Message_PseudonymsysTransferCredentialDataEc); ok {
		return x.PseudonymsysTransferCredentialDataEc
	}
	return nil
}

func (m *Message) GetSessionKey() *SessionKey {
	if x, ok := m.GetContent().(*Message_SessionKey); ok {
		return x.SessionKey
	}
	return nil
}

func (m *Message) GetCLCredReq() *CLCredReq {
	if x, ok := m.GetContent().(*Message_CLCredReq); ok {
		return x.CLCredReq
	}
	return nil
}

func (m *Message) GetCLCredential() *CLCredential {
	if x, ok := m.GetContent().(*Message_CLCredential); ok {
		return x.CLCredential
	}
	return nil
}

func (m *Message) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto1.Message, b *proto1.Buffer) error, func(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error), func(msg proto1.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Bigint)(nil),
		(*Message_EcGroupElement)(nil),
		(*Message_Status)(nil),
		(*Message_PedersenFirst)(nil),
		(*Message_PedersenDecommitment)(nil),
		(*Message_SchnorrProofData)(nil),
		(*Message_SchnorrProofRandomData)(nil),
		(*Message_SchnorrEcProofRandomData)(nil),
		(*Message_PseudonymsysCaCertificate)(nil),
		(*Message_PseudonymsysNymGenProofRandomData)(nil),
		(*Message_PseudonymsysIssueProofRandomData)(nil),
		(*Message_DoubleBigint)(nil),
		(*Message_PseudonymsysTransferCredentialData)(nil),
		(*Message_PseudonymsysCaCertificateEc)(nil),
		(*Message_PseudonymsysNymGenProofRandomDataEc)(nil),
		(*Message_PseudonymsysIssueProofRandomDataEc)(nil),
		(*Message_PseudonymsysTransferCredentialDataEc)(nil),
		(*Message_SessionKey)(nil),
		(*Message_CLCredReq)(nil),
		(*Message_CLCredential)(nil),
	}
}

func _Message_OneofMarshaler(msg proto1.Message, b *proto1.Buffer) error {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Bigint:
		b.EncodeVarint(4<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Bigint); err != nil {
			return err
		}
	case *Message_EcGroupElement:
		b.EncodeVarint(5<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.EcGroupElement); err != nil {
			return err
		}
	case *Message_Status:
		b.EncodeVarint(6<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Message_PedersenFirst:
		b.EncodeVarint(7<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PedersenFirst); err != nil {
			return err
		}
	case *Message_PedersenDecommitment:
		b.EncodeVarint(8<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PedersenDecommitment); err != nil {
			return err
		}
	case *Message_SchnorrProofData:
		b.EncodeVarint(9<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.SchnorrProofData); err != nil {
			return err
		}
	case *Message_SchnorrProofRandomData:
		b.EncodeVarint(10<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.SchnorrProofRandomData); err != nil {
			return err
		}
	case *Message_SchnorrEcProofRandomData:
		b.EncodeVarint(11<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.SchnorrEcProofRandomData); err != nil {
			return err
		}
	case *Message_PseudonymsysCaCertificate:
		b.EncodeVarint(15<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysCaCertificate); err != nil {
			return err
		}
	case *Message_PseudonymsysNymGenProofRandomData:
		b.EncodeVarint(16<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysNymGenProofRandomData); err != nil {
			return err
		}
	case *Message_PseudonymsysIssueProofRandomData:
		b.EncodeVarint(17<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysIssueProofRandomData); err != nil {
			return err
		}
	case *Message_DoubleBigint:
		b.EncodeVarint(18<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.DoubleBigint); err != nil {
			return err
		}
	case *Message_PseudonymsysTransferCredentialData:
		b.EncodeVarint(19<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysTransferCredentialData); err != nil {
			return err
		}
	case *Message_PseudonymsysCaCertificateEc:
		b.EncodeVarint(20<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysCaCertificateEc); err != nil {
			return err
		}
	case *Message_PseudonymsysNymGenProofRandomDataEc:
		b.EncodeVarint(21<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysNymGenProofRandomDataEc); err != nil {
			return err
		}
	case *Message_PseudonymsysIssueProofRandomDataEc:
		b.EncodeVarint(22<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysIssueProofRandomDataEc); err != nil {
			return err
		}
	case *Message_PseudonymsysTransferCredentialDataEc:
		b.EncodeVarint(23<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysTransferCredentialDataEc); err != nil {
			return err
		}
	case *Message_SessionKey:
		b.EncodeVarint(30<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.SessionKey); err != nil {
			return err
		}
	case *Message_CLCredReq:
		b.EncodeVarint(31<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CLCredReq); err != nil {
			return err
		}
	case *Message_CLCredential:
		b.EncodeVarint(32<<3 | proto1.WireBytes)
		if err := b.EncodeMessage(x.CLCredential); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Content has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto1.Message, tag, wire int, b *proto1.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 4: // content.bigint
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(BigInt)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Bigint{msg}
		return true, err
	case 5: // content.ec_group_element
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(ECGroupElement)
		err := b.DecodeMessage(msg)
		m.Content = &Message_EcGroupElement{msg}
		return true, err
	case 6: // content.status
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(Status)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Status{msg}
		return true, err
	case 7: // content.pedersen_first
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PedersenFirst)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PedersenFirst{msg}
		return true, err
	case 8: // content.pedersen_decommitment
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PedersenDecommitment)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PedersenDecommitment{msg}
		return true, err
	case 9: // content.schnorr_proof_data
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(SchnorrProofData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrProofData{msg}
		return true, err
	case 10: // content.schnorr_proof_random_data
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(SchnorrProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrProofRandomData{msg}
		return true, err
	case 11: // content.schnorr_ec_proof_random_data
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(SchnorrECProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrEcProofRandomData{msg}
		return true, err
	case 15: // content.pseudonymsys_ca_certificate
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PseudonymsysCACertificate)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysCaCertificate{msg}
		return true, err
	case 16: // content.pseudonymsys_nym_gen_proof_random_data
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PseudonymsysNymGenProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysNymGenProofRandomData{msg}
		return true, err
	case 17: // content.pseudonymsys_issue_proof_random_data
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PseudonymsysIssueProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysIssueProofRandomData{msg}
		return true, err
	case 18: // content.double_bigint
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(DoubleBigInt)
		err := b.DecodeMessage(msg)
		m.Content = &Message_DoubleBigint{msg}
		return true, err
	case 19: // content.pseudonymsys_transfer_credential_data
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PseudonymsysTransferCredentialData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysTransferCredentialData{msg}
		return true, err
	case 20: // content.pseudonymsys_ca_certificate_ec
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PseudonymsysCACertificateEC)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysCaCertificateEc{msg}
		return true, err
	case 21: // content.pseudonymsys_nym_gen_proof_random_data_ec
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PseudonymsysNymGenProofRandomDataEC)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysNymGenProofRandomDataEc{msg}
		return true, err
	case 22: // content.pseudonymsys_issue_proof_random_data_ec
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PseudonymsysIssueProofRandomDataEC)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysIssueProofRandomDataEc{msg}
		return true, err
	case 23: // content.pseudonymsys_transfer_credential_data_ec
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(PseudonymsysTransferCredentialDataEC)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysTransferCredentialDataEc{msg}
		return true, err
	case 30: // content.SessionKey
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(SessionKey)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SessionKey{msg}
		return true, err
	case 31: // content.CLCredReq
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CLCredReq)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CLCredReq{msg}
		return true, err
	case 32: // content.CLCredential
		if wire != proto1.WireBytes {
			return true, proto1.ErrInternalBadWireType
		}
		msg := new(CLCredential)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CLCredential{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto1.Message) (n int) {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Bigint:
		s := proto1.Size(x.Bigint)
		n += proto1.SizeVarint(4<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_EcGroupElement:
		s := proto1.Size(x.EcGroupElement)
		n += proto1.SizeVarint(5<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_Status:
		s := proto1.Size(x.Status)
		n += proto1.SizeVarint(6<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PedersenFirst:
		s := proto1.Size(x.PedersenFirst)
		n += proto1.SizeVarint(7<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PedersenDecommitment:
		s := proto1.Size(x.PedersenDecommitment)
		n += proto1.SizeVarint(8<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrProofData:
		s := proto1.Size(x.SchnorrProofData)
		n += proto1.SizeVarint(9<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrProofRandomData:
		s := proto1.Size(x.SchnorrProofRandomData)
		n += proto1.SizeVarint(10<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrEcProofRandomData:
		s := proto1.Size(x.SchnorrEcProofRandomData)
		n += proto1.SizeVarint(11<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysCaCertificate:
		s := proto1.Size(x.PseudonymsysCaCertificate)
		n += proto1.SizeVarint(15<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysNymGenProofRandomData:
		s := proto1.Size(x.PseudonymsysNymGenProofRandomData)
		n += proto1.SizeVarint(16<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysIssueProofRandomData:
		s := proto1.Size(x.PseudonymsysIssueProofRandomData)
		n += proto1.SizeVarint(17<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_DoubleBigint:
		s := proto1.Size(x.DoubleBigint)
		n += proto1.SizeVarint(18<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysTransferCredentialData:
		s := proto1.Size(x.PseudonymsysTransferCredentialData)
		n += proto1.SizeVarint(19<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysCaCertificateEc:
		s := proto1.Size(x.PseudonymsysCaCertificateEc)
		n += proto1.SizeVarint(20<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysNymGenProofRandomDataEc:
		s := proto1.Size(x.PseudonymsysNymGenProofRandomDataEc)
		n += proto1.SizeVarint(21<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysIssueProofRandomDataEc:
		s := proto1.Size(x.PseudonymsysIssueProofRandomDataEc)
		n += proto1.SizeVarint(22<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysTransferCredentialDataEc:
		s := proto1.Size(x.PseudonymsysTransferCredentialDataEc)
		n += proto1.SizeVarint(23<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_SessionKey:
		s := proto1.Size(x.SessionKey)
		n += proto1.SizeVarint(30<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_CLCredReq:
		s := proto1.Size(x.CLCredReq)
		n += proto1.SizeVarint(31<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case *Message_CLCredential:
		s := proto1.Size(x.CLCredential)
		n += proto1.SizeVarint(32<<3 | proto1.WireBytes)
		n += proto1.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ServiceInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Provider    string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
}

func (m *ServiceInfo) Reset()                    { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string            { return proto1.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()               {}
func (*ServiceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ServiceInfo) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto1.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Status) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BigInt struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
}

func (m *BigInt) Reset()                    { *m = BigInt{} }
func (m *BigInt) String() string            { return proto1.CompactTextString(m) }
func (*BigInt) ProtoMessage()               {}
func (*BigInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BigInt) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

type DoubleBigInt struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
	X2 []byte `protobuf:"bytes,2,opt,name=X2,proto3" json:"X2,omitempty"`
}

func (m *DoubleBigInt) Reset()                    { *m = DoubleBigInt{} }
func (m *DoubleBigInt) String() string            { return proto1.CompactTextString(m) }
func (*DoubleBigInt) ProtoMessage()               {}
func (*DoubleBigInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DoubleBigInt) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *DoubleBigInt) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

type PedersenFirst struct {
	H []byte `protobuf:"bytes,1,opt,name=H,proto3" json:"H,omitempty"`
}

func (m *PedersenFirst) Reset()                    { *m = PedersenFirst{} }
func (m *PedersenFirst) String() string            { return proto1.CompactTextString(m) }
func (*PedersenFirst) ProtoMessage()               {}
func (*PedersenFirst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PedersenFirst) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

type PedersenDecommitment struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	R []byte `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
}

func (m *PedersenDecommitment) Reset()                    { *m = PedersenDecommitment{} }
func (m *PedersenDecommitment) String() string            { return proto1.CompactTextString(m) }
func (*PedersenDecommitment) ProtoMessage()               {}
func (*PedersenDecommitment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PedersenDecommitment) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *PedersenDecommitment) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

type ECGroupElement struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECGroupElement) Reset()                    { *m = ECGroupElement{} }
func (m *ECGroupElement) String() string            { return proto1.CompactTextString(m) }
func (*ECGroupElement) ProtoMessage()               {}
func (*ECGroupElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ECGroupElement) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECGroupElement) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type Pair struct {
	A []byte `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *Pair) Reset()                    { *m = Pair{} }
func (m *Pair) String() string            { return proto1.CompactTextString(m) }
func (*Pair) ProtoMessage()               {}
func (*Pair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Pair) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *Pair) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrProofRandomData struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	A []byte `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B []byte `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *SchnorrProofRandomData) Reset()                    { *m = SchnorrProofRandomData{} }
func (m *SchnorrProofRandomData) String() string            { return proto1.CompactTextString(m) }
func (*SchnorrProofRandomData) ProtoMessage()               {}
func (*SchnorrProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SchnorrProofRandomData) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SchnorrProofRandomData) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *SchnorrProofRandomData) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrProofData struct {
	Z []byte `protobuf:"bytes,1,opt,name=Z,proto3" json:"Z,omitempty"`
}

func (m *SchnorrProofData) Reset()                    { *m = SchnorrProofData{} }
func (m *SchnorrProofData) String() string            { return proto1.CompactTextString(m) }
func (*SchnorrProofData) ProtoMessage()               {}
func (*SchnorrProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SchnorrProofData) GetZ() []byte {
	if m != nil {
		return m.Z
	}
	return nil
}

type FiatShamir struct {
	// Used for example for SchnorrProof and RepresentationProof where challenge is constructed by prover
	// using hash function.
	// Note that here we don't have A and B as in SchnorrProofRandomData because usually when proving
	// the knowledge of X such that A^X = B, A is known beforehand (as part of public key).
	// So here ProofRandomData is actually only X.
	ProofRandomData []byte   `protobuf:"bytes,1,opt,name=ProofRandomData,proto3" json:"ProofRandomData,omitempty"`
	Challenge       []byte   `protobuf:"bytes,2,opt,name=Challenge,proto3" json:"Challenge,omitempty"`
	ProofData       [][]byte `protobuf:"bytes,3,rep,name=ProofData,proto3" json:"ProofData,omitempty"`
}

func (m *FiatShamir) Reset()                    { *m = FiatShamir{} }
func (m *FiatShamir) String() string            { return proto1.CompactTextString(m) }
func (*FiatShamir) ProtoMessage()               {}
func (*FiatShamir) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FiatShamir) GetProofRandomData() []byte {
	if m != nil {
		return m.ProofRandomData
	}
	return nil
}

func (m *FiatShamir) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *FiatShamir) GetProofData() [][]byte {
	if m != nil {
		return m.ProofData
	}
	return nil
}

type FiatShamirAlsoNeg struct {
	// For proofs where proof data can be negative (see RepresentationProof).
	ProofRandomData []byte   `protobuf:"bytes,1,opt,name=ProofRandomData,proto3" json:"ProofRandomData,omitempty"`
	Challenge       []byte   `protobuf:"bytes,2,opt,name=Challenge,proto3" json:"Challenge,omitempty"`
	ProofData       []string `protobuf:"bytes,3,rep,name=ProofData" json:"ProofData,omitempty"`
}

func (m *FiatShamirAlsoNeg) Reset()                    { *m = FiatShamirAlsoNeg{} }
func (m *FiatShamirAlsoNeg) String() string            { return proto1.CompactTextString(m) }
func (*FiatShamirAlsoNeg) ProtoMessage()               {}
func (*FiatShamirAlsoNeg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FiatShamirAlsoNeg) GetProofRandomData() []byte {
	if m != nil {
		return m.ProofRandomData
	}
	return nil
}

func (m *FiatShamirAlsoNeg) GetChallenge() []byte {
	if m != nil {
		return m.Challenge
	}
	return nil
}

func (m *FiatShamirAlsoNeg) GetProofData() []string {
	if m != nil {
		return m.ProofData
	}
	return nil
}

type SchnorrECProofRandomData struct {
	X *ECGroupElement `protobuf:"bytes,1,opt,name=X" json:"X,omitempty"`
	A *ECGroupElement `protobuf:"bytes,2,opt,name=A" json:"A,omitempty"`
	B *ECGroupElement `protobuf:"bytes,3,opt,name=B" json:"B,omitempty"`
}

func (m *SchnorrECProofRandomData) Reset()                    { *m = SchnorrECProofRandomData{} }
func (m *SchnorrECProofRandomData) String() string            { return proto1.CompactTextString(m) }
func (*SchnorrECProofRandomData) ProtoMessage()               {}
func (*SchnorrECProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *SchnorrECProofRandomData) GetX() *ECGroupElement {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type PseudonymsysNymGenProofRandomData struct {
	X1     []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
	A1     []byte `protobuf:"bytes,2,opt,name=A1,proto3" json:"A1,omitempty"`
	B1     []byte `protobuf:"bytes,3,opt,name=B1,proto3" json:"B1,omitempty"`
	X2     []byte `protobuf:"bytes,4,opt,name=X2,proto3" json:"X2,omitempty"`
	A2     []byte `protobuf:"bytes,5,opt,name=A2,proto3" json:"A2,omitempty"`
	B2     []byte `protobuf:"bytes,6,opt,name=B2,proto3" json:"B2,omitempty"`
	R      []byte `protobuf:"bytes,7,opt,name=R,proto3" json:"R,omitempty"`
	S      []byte `protobuf:"bytes,8,opt,name=S,proto3" json:"S,omitempty"`
	RegKey string `protobuf:"bytes,9,opt,name=RegKey" json:"RegKey,omitempty"`
}

func (m *PseudonymsysNymGenProofRandomData) Reset()         { *m = PseudonymsysNymGenProofRandomData{} }
func (m *PseudonymsysNymGenProofRandomData) String() string { return proto1.CompactTextString(m) }
func (*PseudonymsysNymGenProofRandomData) ProtoMessage()    {}
func (*PseudonymsysNymGenProofRandomData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14}
}

func (m *PseudonymsysNymGenProofRandomData) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetA1() []byte {
	if m != nil {
		return m.A1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetB1() []byte {
	if m != nil {
		return m.B1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetA2() []byte {
	if m != nil {
		return m.A2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetB2() []byte {
	if m != nil {
		return m.B2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetRegKey() string {
	if m != nil {
		return m.RegKey
	}
	return ""
}

type PseudonymsysNymGenProofRandomDataEC struct {
	X1     *ECGroupElement `protobuf:"bytes,1,opt,name=X1" json:"X1,omitempty"`
	A1     *ECGroupElement `protobuf:"bytes,2,opt,name=A1" json:"A1,omitempty"`
	B1     *ECGroupElement `protobuf:"bytes,3,opt,name=B1" json:"B1,omitempty"`
	X2     *ECGroupElement `protobuf:"bytes,4,opt,name=X2" json:"X2,omitempty"`
	A2     *ECGroupElement `protobuf:"bytes,5,opt,name=A2" json:"A2,omitempty"`
	B2     *ECGroupElement `protobuf:"bytes,6,opt,name=B2" json:"B2,omitempty"`
	R      []byte          `protobuf:"bytes,7,opt,name=R,proto3" json:"R,omitempty"`
	S      []byte          `protobuf:"bytes,8,opt,name=S,proto3" json:"S,omitempty"`
	RegKey string          `protobuf:"bytes,9,opt,name=RegKey" json:"RegKey,omitempty"`
}

func (m *PseudonymsysNymGenProofRandomDataEC) Reset()         { *m = PseudonymsysNymGenProofRandomDataEC{} }
func (m *PseudonymsysNymGenProofRandomDataEC) String() string { return proto1.CompactTextString(m) }
func (*PseudonymsysNymGenProofRandomDataEC) ProtoMessage()    {}
func (*PseudonymsysNymGenProofRandomDataEC) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15}
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetX1() *ECGroupElement {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetA1() *ECGroupElement {
	if m != nil {
		return m.A1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetB1() *ECGroupElement {
	if m != nil {
		return m.B1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetX2() *ECGroupElement {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetA2() *ECGroupElement {
	if m != nil {
		return m.A2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetB2() *ECGroupElement {
	if m != nil {
		return m.B2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetRegKey() string {
	if m != nil {
		return m.RegKey
	}
	return ""
}

type PseudonymsysCACertificate struct {
	BlindedA []byte `protobuf:"bytes,1,opt,name=BlindedA,proto3" json:"BlindedA,omitempty"`
	BlindedB []byte `protobuf:"bytes,2,opt,name=BlindedB,proto3" json:"BlindedB,omitempty"`
	R        []byte `protobuf:"bytes,3,opt,name=R,proto3" json:"R,omitempty"`
	S        []byte `protobuf:"bytes,4,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *PseudonymsysCACertificate) Reset()                    { *m = PseudonymsysCACertificate{} }
func (m *PseudonymsysCACertificate) String() string            { return proto1.CompactTextString(m) }
func (*PseudonymsysCACertificate) ProtoMessage()               {}
func (*PseudonymsysCACertificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PseudonymsysCACertificate) GetBlindedA() []byte {
	if m != nil {
		return m.BlindedA
	}
	return nil
}

func (m *PseudonymsysCACertificate) GetBlindedB() []byte {
	if m != nil {
		return m.BlindedB
	}
	return nil
}

func (m *PseudonymsysCACertificate) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PseudonymsysCACertificate) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type PseudonymsysCACertificateEC struct {
	BlindedA *ECGroupElement `protobuf:"bytes,1,opt,name=BlindedA" json:"BlindedA,omitempty"`
	BlindedB *ECGroupElement `protobuf:"bytes,2,opt,name=BlindedB" json:"BlindedB,omitempty"`
	R        []byte          `protobuf:"bytes,3,opt,name=R,proto3" json:"R,omitempty"`
	S        []byte          `protobuf:"bytes,4,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *PseudonymsysCACertificateEC) Reset()                    { *m = PseudonymsysCACertificateEC{} }
func (m *PseudonymsysCACertificateEC) String() string            { return proto1.CompactTextString(m) }
func (*PseudonymsysCACertificateEC) ProtoMessage()               {}
func (*PseudonymsysCACertificateEC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PseudonymsysCACertificateEC) GetBlindedA() *ECGroupElement {
	if m != nil {
		return m.BlindedA
	}
	return nil
}

func (m *PseudonymsysCACertificateEC) GetBlindedB() *ECGroupElement {
	if m != nil {
		return m.BlindedB
	}
	return nil
}

func (m *PseudonymsysCACertificateEC) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PseudonymsysCACertificateEC) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type PseudonymsysIssueProofRandomData struct {
	X11 []byte `protobuf:"bytes,1,opt,name=X11,proto3" json:"X11,omitempty"`
	X12 []byte `protobuf:"bytes,2,opt,name=X12,proto3" json:"X12,omitempty"`
	X21 []byte `protobuf:"bytes,3,opt,name=X21,proto3" json:"X21,omitempty"`
	X22 []byte `protobuf:"bytes,4,opt,name=X22,proto3" json:"X22,omitempty"`
	A   []byte `protobuf:"bytes,5,opt,name=A,proto3" json:"A,omitempty"`
	B   []byte `protobuf:"bytes,6,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *PseudonymsysIssueProofRandomData) Reset()         { *m = PseudonymsysIssueProofRandomData{} }
func (m *PseudonymsysIssueProofRandomData) String() string { return proto1.CompactTextString(m) }
func (*PseudonymsysIssueProofRandomData) ProtoMessage()    {}
func (*PseudonymsysIssueProofRandomData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *PseudonymsysIssueProofRandomData) GetX11() []byte {
	if m != nil {
		return m.X11
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetX12() []byte {
	if m != nil {
		return m.X12
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetX21() []byte {
	if m != nil {
		return m.X21
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetX22() []byte {
	if m != nil {
		return m.X22
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

type PseudonymsysIssueProofRandomDataEC struct {
	X11 *ECGroupElement `protobuf:"bytes,1,opt,name=X11" json:"X11,omitempty"`
	X12 *ECGroupElement `protobuf:"bytes,2,opt,name=X12" json:"X12,omitempty"`
	X21 *ECGroupElement `protobuf:"bytes,3,opt,name=X21" json:"X21,omitempty"`
	X22 *ECGroupElement `protobuf:"bytes,4,opt,name=X22" json:"X22,omitempty"`
	A   *ECGroupElement `protobuf:"bytes,5,opt,name=A" json:"A,omitempty"`
	B   *ECGroupElement `protobuf:"bytes,6,opt,name=B" json:"B,omitempty"`
}

func (m *PseudonymsysIssueProofRandomDataEC) Reset()         { *m = PseudonymsysIssueProofRandomDataEC{} }
func (m *PseudonymsysIssueProofRandomDataEC) String() string { return proto1.CompactTextString(m) }
func (*PseudonymsysIssueProofRandomDataEC) ProtoMessage()    {}
func (*PseudonymsysIssueProofRandomDataEC) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *PseudonymsysIssueProofRandomDataEC) GetX11() *ECGroupElement {
	if m != nil {
		return m.X11
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetX12() *ECGroupElement {
	if m != nil {
		return m.X12
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetX21() *ECGroupElement {
	if m != nil {
		return m.X21
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetX22() *ECGroupElement {
	if m != nil {
		return m.X22
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type PseudonymsysTranscript struct {
	A      []byte `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	B      []byte `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
	Hash   []byte `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ZAlpha []byte `protobuf:"bytes,4,opt,name=ZAlpha,proto3" json:"ZAlpha,omitempty"`
}

func (m *PseudonymsysTranscript) Reset()                    { *m = PseudonymsysTranscript{} }
func (m *PseudonymsysTranscript) String() string            { return proto1.CompactTextString(m) }
func (*PseudonymsysTranscript) ProtoMessage()               {}
func (*PseudonymsysTranscript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PseudonymsysTranscript) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *PseudonymsysTranscript) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *PseudonymsysTranscript) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PseudonymsysTranscript) GetZAlpha() []byte {
	if m != nil {
		return m.ZAlpha
	}
	return nil
}

type PseudonymsysTranscriptEC struct {
	A      *ECGroupElement `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
	B      *ECGroupElement `protobuf:"bytes,2,opt,name=B" json:"B,omitempty"`
	Hash   []byte          `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ZAlpha []byte          `protobuf:"bytes,4,opt,name=ZAlpha,proto3" json:"ZAlpha,omitempty"`
}

func (m *PseudonymsysTranscriptEC) Reset()                    { *m = PseudonymsysTranscriptEC{} }
func (m *PseudonymsysTranscriptEC) String() string            { return proto1.CompactTextString(m) }
func (*PseudonymsysTranscriptEC) ProtoMessage()               {}
func (*PseudonymsysTranscriptEC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PseudonymsysTranscriptEC) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *PseudonymsysTranscriptEC) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *PseudonymsysTranscriptEC) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PseudonymsysTranscriptEC) GetZAlpha() []byte {
	if m != nil {
		return m.ZAlpha
	}
	return nil
}

type PseudonymsysCredential struct {
	SmallAToGamma []byte                  `protobuf:"bytes,1,opt,name=SmallAToGamma,proto3" json:"SmallAToGamma,omitempty"`
	SmallBToGamma []byte                  `protobuf:"bytes,2,opt,name=SmallBToGamma,proto3" json:"SmallBToGamma,omitempty"`
	AToGamma      []byte                  `protobuf:"bytes,3,opt,name=AToGamma,proto3" json:"AToGamma,omitempty"`
	BToGamma      []byte                  `protobuf:"bytes,4,opt,name=BToGamma,proto3" json:"BToGamma,omitempty"`
	T1            *PseudonymsysTranscript `protobuf:"bytes,5,opt,name=T1" json:"T1,omitempty"`
	T2            *PseudonymsysTranscript `protobuf:"bytes,6,opt,name=T2" json:"T2,omitempty"`
}

func (m *PseudonymsysCredential) Reset()                    { *m = PseudonymsysCredential{} }
func (m *PseudonymsysCredential) String() string            { return proto1.CompactTextString(m) }
func (*PseudonymsysCredential) ProtoMessage()               {}
func (*PseudonymsysCredential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PseudonymsysCredential) GetSmallAToGamma() []byte {
	if m != nil {
		return m.SmallAToGamma
	}
	return nil
}

func (m *PseudonymsysCredential) GetSmallBToGamma() []byte {
	if m != nil {
		return m.SmallBToGamma
	}
	return nil
}

func (m *PseudonymsysCredential) GetAToGamma() []byte {
	if m != nil {
		return m.AToGamma
	}
	return nil
}

func (m *PseudonymsysCredential) GetBToGamma() []byte {
	if m != nil {
		return m.BToGamma
	}
	return nil
}

func (m *PseudonymsysCredential) GetT1() *PseudonymsysTranscript {
	if m != nil {
		return m.T1
	}
	return nil
}

func (m *PseudonymsysCredential) GetT2() *PseudonymsysTranscript {
	if m != nil {
		return m.T2
	}
	return nil
}

type PseudonymsysCredentialEC struct {
	SmallAToGamma *ECGroupElement           `protobuf:"bytes,1,opt,name=SmallAToGamma" json:"SmallAToGamma,omitempty"`
	SmallBToGamma *ECGroupElement           `protobuf:"bytes,2,opt,name=SmallBToGamma" json:"SmallBToGamma,omitempty"`
	AToGamma      *ECGroupElement           `protobuf:"bytes,3,opt,name=AToGamma" json:"AToGamma,omitempty"`
	BToGamma      *ECGroupElement           `protobuf:"bytes,4,opt,name=BToGamma" json:"BToGamma,omitempty"`
	T1            *PseudonymsysTranscriptEC `protobuf:"bytes,5,opt,name=T1" json:"T1,omitempty"`
	T2            *PseudonymsysTranscriptEC `protobuf:"bytes,6,opt,name=T2" json:"T2,omitempty"`
}

func (m *PseudonymsysCredentialEC) Reset()                    { *m = PseudonymsysCredentialEC{} }
func (m *PseudonymsysCredentialEC) String() string            { return proto1.CompactTextString(m) }
func (*PseudonymsysCredentialEC) ProtoMessage()               {}
func (*PseudonymsysCredentialEC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PseudonymsysCredentialEC) GetSmallAToGamma() *ECGroupElement {
	if m != nil {
		return m.SmallAToGamma
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetSmallBToGamma() *ECGroupElement {
	if m != nil {
		return m.SmallBToGamma
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetAToGamma() *ECGroupElement {
	if m != nil {
		return m.AToGamma
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetBToGamma() *ECGroupElement {
	if m != nil {
		return m.BToGamma
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetT1() *PseudonymsysTranscriptEC {
	if m != nil {
		return m.T1
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetT2() *PseudonymsysTranscriptEC {
	if m != nil {
		return m.T2
	}
	return nil
}

type PseudonymsysTransferCredentialData struct {
	OrgName    string                  `protobuf:"bytes,1,opt,name=OrgName" json:"OrgName,omitempty"`
	X1         []byte                  `protobuf:"bytes,2,opt,name=X1,proto3" json:"X1,omitempty"`
	X2         []byte                  `protobuf:"bytes,3,opt,name=X2,proto3" json:"X2,omitempty"`
	NymA       []byte                  `protobuf:"bytes,4,opt,name=NymA,proto3" json:"NymA,omitempty"`
	NymB       []byte                  `protobuf:"bytes,5,opt,name=NymB,proto3" json:"NymB,omitempty"`
	Credential *PseudonymsysCredential `protobuf:"bytes,6,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *PseudonymsysTransferCredentialData) Reset()         { *m = PseudonymsysTransferCredentialData{} }
func (m *PseudonymsysTransferCredentialData) String() string { return proto1.CompactTextString(m) }
func (*PseudonymsysTransferCredentialData) ProtoMessage()    {}
func (*PseudonymsysTransferCredentialData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *PseudonymsysTransferCredentialData) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *PseudonymsysTransferCredentialData) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *PseudonymsysTransferCredentialData) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *PseudonymsysTransferCredentialData) GetNymA() []byte {
	if m != nil {
		return m.NymA
	}
	return nil
}

func (m *PseudonymsysTransferCredentialData) GetNymB() []byte {
	if m != nil {
		return m.NymB
	}
	return nil
}

func (m *PseudonymsysTransferCredentialData) GetCredential() *PseudonymsysCredential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type PseudonymsysTransferCredentialDataEC struct {
	OrgName    string                    `protobuf:"bytes,1,opt,name=OrgName" json:"OrgName,omitempty"`
	X1         *ECGroupElement           `protobuf:"bytes,2,opt,name=X1" json:"X1,omitempty"`
	X2         *ECGroupElement           `protobuf:"bytes,3,opt,name=X2" json:"X2,omitempty"`
	NymA       *ECGroupElement           `protobuf:"bytes,4,opt,name=NymA" json:"NymA,omitempty"`
	NymB       *ECGroupElement           `protobuf:"bytes,5,opt,name=NymB" json:"NymB,omitempty"`
	Credential *PseudonymsysCredentialEC `protobuf:"bytes,6,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *PseudonymsysTransferCredentialDataEC) Reset()         { *m = PseudonymsysTransferCredentialDataEC{} }
func (m *PseudonymsysTransferCredentialDataEC) String() string { return proto1.CompactTextString(m) }
func (*PseudonymsysTransferCredentialDataEC) ProtoMessage()    {}
func (*PseudonymsysTransferCredentialDataEC) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *PseudonymsysTransferCredentialDataEC) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *PseudonymsysTransferCredentialDataEC) GetX1() *ECGroupElement {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *PseudonymsysTransferCredentialDataEC) GetX2() *ECGroupElement {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *PseudonymsysTransferCredentialDataEC) GetNymA() *ECGroupElement {
	if m != nil {
		return m.NymA
	}
	return nil
}

func (m *PseudonymsysTransferCredentialDataEC) GetNymB() *ECGroupElement {
	if m != nil {
		return m.NymB
	}
	return nil
}

func (m *PseudonymsysTransferCredentialDataEC) GetCredential() *PseudonymsysCredentialEC {
	if m != nil {
		return m.Credential
	}
	return nil
}

type CSPaillierSecretKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	X1                   []byte `protobuf:"bytes,3,opt,name=X1,proto3" json:"X1,omitempty"`
	X2                   []byte `protobuf:"bytes,4,opt,name=X2,proto3" json:"X2,omitempty"`
	X3                   []byte `protobuf:"bytes,5,opt,name=X3,proto3" json:"X3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierSecretKey) Reset()                    { *m = CSPaillierSecretKey{} }
func (m *CSPaillierSecretKey) String() string            { return proto1.CompactTextString(m) }
func (*CSPaillierSecretKey) ProtoMessage()               {}
func (*CSPaillierSecretKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CSPaillierSecretKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *CSPaillierSecretKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX3() []byte {
	if m != nil {
		return m.X3
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogP() []byte {
	if m != nil {
		return m.DLogP
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogG() []byte {
	if m != nil {
		return m.DLogG
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogQ() []byte {
	if m != nil {
		return m.DLogQ
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupN() []byte {
	if m != nil {
		return m.VerifiableEncGroupN
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupG1() []byte {
	if m != nil {
		return m.VerifiableEncGroupG1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupH1() []byte {
	if m != nil {
		return m.VerifiableEncGroupH1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *CSPaillierSecretKey) GetK1() int32 {
	if m != nil {
		return m.K1
	}
	return 0
}

type CSPaillierPubKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	Y1                   []byte `protobuf:"bytes,3,opt,name=Y1,proto3" json:"Y1,omitempty"`
	Y2                   []byte `protobuf:"bytes,4,opt,name=Y2,proto3" json:"Y2,omitempty"`
	Y3                   []byte `protobuf:"bytes,5,opt,name=Y3,proto3" json:"Y3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierPubKey) Reset()                    { *m = CSPaillierPubKey{} }
func (m *CSPaillierPubKey) String() string            { return proto1.CompactTextString(m) }
func (*CSPaillierPubKey) ProtoMessage()               {}
func (*CSPaillierPubKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CSPaillierPubKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *CSPaillierPubKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CSPaillierPubKey) GetY1() []byte {
	if m != nil {
		return m.Y1
	}
	return nil
}

func (m *CSPaillierPubKey) GetY2() []byte {
	if m != nil {
		return m.Y2
	}
	return nil
}

func (m *CSPaillierPubKey) GetY3() []byte {
	if m != nil {
		return m.Y3
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogP() []byte {
	if m != nil {
		return m.DLogP
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogG() []byte {
	if m != nil {
		return m.DLogG
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogQ() []byte {
	if m != nil {
		return m.DLogQ
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupN() []byte {
	if m != nil {
		return m.VerifiableEncGroupN
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupG1() []byte {
	if m != nil {
		return m.VerifiableEncGroupG1
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupH1() []byte {
	if m != nil {
		return m.VerifiableEncGroupH1
	}
	return nil
}

func (m *CSPaillierPubKey) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *CSPaillierPubKey) GetK1() int32 {
	if m != nil {
		return m.K1
	}
	return 0
}

type SessionKey struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *SessionKey) Reset()                    { *m = SessionKey{} }
func (m *SessionKey) String() string            { return proto1.CompactTextString(m) }
func (*SessionKey) ProtoMessage()               {}
func (*SessionKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SessionKey) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type CLCredReq struct {
	Nym                      []byte             `protobuf:"bytes,1,opt,name=Nym,proto3" json:"Nym,omitempty"`
	KnownAttrs               [][]byte           `protobuf:"bytes,2,rep,name=KnownAttrs,proto3" json:"KnownAttrs,omitempty"`
	CommitmentsOfAttrs       [][]byte           `protobuf:"bytes,3,rep,name=CommitmentsOfAttrs,proto3" json:"CommitmentsOfAttrs,omitempty"`
	NymProof                 *FiatShamir        `protobuf:"bytes,4,opt,name=NymProof" json:"NymProof,omitempty"`
	U                        []byte             `protobuf:"bytes,5,opt,name=U,proto3" json:"U,omitempty"`
	UProof                   *FiatShamirAlsoNeg `protobuf:"bytes,6,opt,name=UProof" json:"UProof,omitempty"`
	CommitmentsOfAttrsProofs []*FiatShamir      `protobuf:"bytes,7,rep,name=CommitmentsOfAttrsProofs" json:"CommitmentsOfAttrsProofs,omitempty"`
	Nonce                    []byte             `protobuf:"bytes,8,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
}

func (m *CLCredReq) Reset()                    { *m = CLCredReq{} }
func (m *CLCredReq) String() string            { return proto1.CompactTextString(m) }
func (*CLCredReq) ProtoMessage()               {}
func (*CLCredReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CLCredReq) GetNym() []byte {
	if m != nil {
		return m.Nym
	}
	return nil
}

func (m *CLCredReq) GetKnownAttrs() [][]byte {
	if m != nil {
		return m.KnownAttrs
	}
	return nil
}

func (m *CLCredReq) GetCommitmentsOfAttrs() [][]byte {
	if m != nil {
		return m.CommitmentsOfAttrs
	}
	return nil
}

func (m *CLCredReq) GetNymProof() *FiatShamir {
	if m != nil {
		return m.NymProof
	}
	return nil
}

func (m *CLCredReq) GetU() []byte {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *CLCredReq) GetUProof() *FiatShamirAlsoNeg {
	if m != nil {
		return m.UProof
	}
	return nil
}

func (m *CLCredReq) GetCommitmentsOfAttrsProofs() []*FiatShamir {
	if m != nil {
		return m.CommitmentsOfAttrsProofs
	}
	return nil
}

func (m *CLCredReq) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

type CLCredential struct {
	A   []byte `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	E   []byte `protobuf:"bytes,2,opt,name=E,proto3" json:"E,omitempty"`
	V11 []byte `protobuf:"bytes,3,opt,name=V11,proto3" json:"V11,omitempty"`
}

func (m *CLCredential) Reset()                    { *m = CLCredential{} }
func (m *CLCredential) String() string            { return proto1.CompactTextString(m) }
func (*CLCredential) ProtoMessage()               {}
func (*CLCredential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CLCredential) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *CLCredential) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CLCredential) GetV11() []byte {
	if m != nil {
		return m.V11
	}
	return nil
}

func init() {
	proto1.RegisterType((*Message)(nil), "proto.Message")
	proto1.RegisterType((*ServiceInfo)(nil), "proto.ServiceInfo")
	proto1.RegisterType((*Status)(nil), "proto.Status")
	proto1.RegisterType((*BigInt)(nil), "proto.BigInt")
	proto1.RegisterType((*DoubleBigInt)(nil), "proto.DoubleBigInt")
	proto1.RegisterType((*PedersenFirst)(nil), "proto.PedersenFirst")
	proto1.RegisterType((*PedersenDecommitment)(nil), "proto.PedersenDecommitment")
	proto1.RegisterType((*ECGroupElement)(nil), "proto.ECGroupElement")
	proto1.RegisterType((*Pair)(nil), "proto.Pair")
	proto1.RegisterType((*SchnorrProofRandomData)(nil), "proto.SchnorrProofRandomData")
	proto1.RegisterType((*SchnorrProofData)(nil), "proto.SchnorrProofData")
	proto1.RegisterType((*FiatShamir)(nil), "proto.FiatShamir")
	proto1.RegisterType((*FiatShamirAlsoNeg)(nil), "proto.FiatShamirAlsoNeg")
	proto1.RegisterType((*SchnorrECProofRandomData)(nil), "proto.SchnorrECProofRandomData")
	proto1.RegisterType((*PseudonymsysNymGenProofRandomData)(nil), "proto.PseudonymsysNymGenProofRandomData")
	proto1.RegisterType((*PseudonymsysNymGenProofRandomDataEC)(nil), "proto.PseudonymsysNymGenProofRandomDataEC")
	proto1.RegisterType((*PseudonymsysCACertificate)(nil), "proto.PseudonymsysCACertificate")
	proto1.RegisterType((*PseudonymsysCACertificateEC)(nil), "proto.PseudonymsysCACertificateEC")
	proto1.RegisterType((*PseudonymsysIssueProofRandomData)(nil), "proto.PseudonymsysIssueProofRandomData")
	proto1.RegisterType((*PseudonymsysIssueProofRandomDataEC)(nil), "proto.PseudonymsysIssueProofRandomDataEC")
	proto1.RegisterType((*PseudonymsysTranscript)(nil), "proto.PseudonymsysTranscript")
	proto1.RegisterType((*PseudonymsysTranscriptEC)(nil), "proto.PseudonymsysTranscriptEC")
	proto1.RegisterType((*PseudonymsysCredential)(nil), "proto.PseudonymsysCredential")
	proto1.RegisterType((*PseudonymsysCredentialEC)(nil), "proto.PseudonymsysCredentialEC")
	proto1.RegisterType((*PseudonymsysTransferCredentialData)(nil), "proto.PseudonymsysTransferCredentialData")
	proto1.RegisterType((*PseudonymsysTransferCredentialDataEC)(nil), "proto.PseudonymsysTransferCredentialDataEC")
	proto1.RegisterType((*CSPaillierSecretKey)(nil), "proto.CSPaillierSecretKey")
	proto1.RegisterType((*CSPaillierPubKey)(nil), "proto.CSPaillierPubKey")
	proto1.RegisterType((*SessionKey)(nil), "proto.SessionKey")
	proto1.RegisterType((*CLCredReq)(nil), "proto.CLCredReq")
	proto1.RegisterType((*CLCredential)(nil), "proto.CLCredential")
}

func init() { proto1.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1845 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x58, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x17, 0x29, 0x5b, 0x8e, 0x5f, 0x64, 0xaf, 0x33, 0x71, 0xbc, 0xcc, 0x3a, 0x1f, 0x5a, 0x26,
	0xae, 0x9d, 0xb6, 0x9b, 0x84, 0xca, 0xa9, 0xdd, 0x2e, 0x0a, 0x49, 0xd1, 0x5a, 0x81, 0x77, 0xb5,
	0x2e, 0x95, 0x04, 0xb6, 0x2f, 0x2a, 0x4d, 0x8d, 0x64, 0x02, 0xfc, 0x50, 0x49, 0x2a, 0x85, 0x0e,
	0x2d, 0x7a, 0x68, 0x0b, 0xf4, 0x56, 0xf4, 0xd6, 0x53, 0x4f, 0xfd, 0x1b, 0x7a, 0x2e, 0x8a, 0xfe,
	0x0f, 0x05, 0xda, 0xbf, 0xa4, 0xa7, 0x62, 0x1e, 0x67, 0x28, 0x52, 0xe2, 0x87, 0x5a, 0xa0, 0xa7,
	0x3d, 0x89, 0xef, 0xbd, 0xdf, 0xfb, 0x9c, 0x99, 0x37, 0x6f, 0x04, 0xbb, 0x0e, 0x0d, 0x02, 0x63,
	0x42, 0x83, 0xe7, 0x53, 0xdf, 0x0b, 0x3d, 0xb2, 0x89, 0x3f, 0x9f, 0x1c, 0x4e, 0x3c, 0x6f, 0x62,
	0xd3, 0x17, 0x48, 0x5d, 0xcf, 0xc6, 0x2f, 0xa8, 0x33, 0x0d, 0xe7, 0x11, 0x46, 0xfd, 0xe3, 0x2e,
	0x6c, 0x7d, 0x1d, 0xa9, 0x91, 0x63, 0xa8, 0x5d, 0x5b, 0x13, 0xcb, 0x0d, 0x95, 0x8d, 0x86, 0x74,
	0x72, 0xbb, 0xb9, 0x13, 0x61, 0x9e, 0xb7, 0xad, 0xc9, 0x1b, 0x37, 0xec, 0x55, 0x74, 0x2e, 0x26,
	0x2d, 0xd8, 0xa3, 0xe6, 0x70, 0xe2, 0x7b, 0xb3, 0xe9, 0x90, 0xda, 0xd4, 0xa1, 0x6e, 0xa8, 0x6c,
	0xa2, 0xca, 0x3d, 0xae, 0xd2, 0xed, 0x9c, 0x32, 0x69, 0x37, 0x12, 0xf6, 0x2a, 0xfa, 0x2e, 0x35,
	0x93, 0x1c, 0xe6, 0x2b, 0x08, 0x8d, 0x70, 0x16, 0x28, 0xb5, 0x94, 0xaf, 0x01, 0x32, 0x99, 0xaf,
	0x48, 0x4c, 0xbe, 0x80, 0xdd, 0x29, 0x1d, 0x51, 0x3f, 0xa0, 0xee, 0x70, 0x6c, 0xf9, 0x41, 0xa8,
	0x6c, 0xa1, 0xc2, 0x3e, 0x57, 0x38, 0xe7, 0xc2, 0x2f, 0x99, 0xac, 0x57, 0xd1, 0x77, 0xa6, 0x49,
	0x06, 0xd1, 0xe1, 0x5e, 0xac, 0x3e, 0xa2, 0xa6, 0xe7, 0x38, 0x56, 0x88, 0xf1, 0xde, 0x42, 0x2b,
	0x87, 0x4b, 0x56, 0x5e, 0x27, 0x20, 0xbd, 0x8a, 0xbe, 0x3f, 0xcd, 0xe0, 0x93, 0x53, 0x20, 0x81,
	0x79, 0xe3, 0x7a, 0xbe, 0x3f, 0x9c, 0xfa, 0x9e, 0x37, 0x1e, 0x8e, 0x8c, 0xd0, 0x50, 0xb6, 0xd1,
	0xe0, 0xc7, 0x22, 0x8f, 0x08, 0x70, 0xce, 0xe4, 0xaf, 0x8d, 0xd0, 0xe8, 0x55, 0xf4, 0xbd, 0x60,
	0x89, 0x47, 0xae, 0xe0, 0x7e, 0xda, 0x90, 0x6f, 0xb8, 0x23, 0xcf, 0x89, 0xec, 0x01, 0xda, 0x7b,
	0x98, 0x61, 0x4f, 0x47, 0x14, 0xb7, 0x7a, 0x10, 0x64, 0x4a, 0x88, 0x01, 0x0f, 0x84, 0x6d, 0x6a,
	0x66, 0x98, 0xbf, 0x8d, 0xe6, 0x1f, 0xa7, 0xcd, 0x77, 0x3b, 0xab, 0x0e, 0x14, 0x6e, 0xa6, 0x6b,
	0x2e, 0xbb, 0xb8, 0x86, 0xc3, 0x69, 0x40, 0x67, 0x23, 0xcf, 0x9d, 0x3b, 0xc1, 0x3c, 0x18, 0x9a,
	0xc6, 0xd0, 0xa4, 0x7e, 0x68, 0x8d, 0x2d, 0xd3, 0x08, 0xa9, 0xf2, 0x11, 0x7a, 0x68, 0x88, 0x0a,
	0x27, 0x90, 0x9d, 0x56, 0x67, 0x81, 0xeb, 0x55, 0xf4, 0xfb, 0x49, 0x33, 0x1d, 0x23, 0x21, 0x24,
	0xbf, 0x80, 0xef, 0xa4, 0x7c, 0xb8, 0x73, 0x67, 0x38, 0xa1, 0x6e, 0x46, 0x42, 0x7b, 0xe8, 0xee,
	0x24, 0xc3, 0x5d, 0x7f, 0xee, 0x9c, 0x52, 0x77, 0x35, 0xb3, 0x4f, 0xa7, 0x65, 0x20, 0x32, 0x87,
	0xa7, 0x29, 0xf7, 0x56, 0x10, 0xcc, 0x68, 0x86, 0xf3, 0x3b, 0xe8, 0xfc, 0x38, 0xc3, 0xf9, 0x1b,
	0xa6, 0xb1, 0xea, 0xbb, 0x31, 0x2d, 0xc1, 0x90, 0x1f, 0xc2, 0xce, 0xc8, 0x9b, 0x5d, 0xdb, 0x74,
	0xc8, 0x0f, 0x25, 0x41, 0x1f, 0x77, 0xb9, 0x8f, 0xd7, 0x28, 0x8b, 0x8f, 0x66, 0x7d, 0x24, 0x68,
	0x76, 0x40, 0x7f, 0x09, 0x47, 0xa9, 0xb0, 0x43, 0xdf, 0x70, 0x83, 0x31, 0xf5, 0x87, 0xa6, 0x4f,
	0x47, 0xd4, 0x0d, 0x2d, 0xc3, 0x8e, 0xe2, 0xbe, 0x8b, 0x36, 0x9f, 0x65, 0xc4, 0xfd, 0x96, 0xab,
	0x74, 0x62, 0x0d, 0x1e, 0xb9, 0x3a, 0x2d, 0x45, 0x11, 0x0b, 0x1e, 0x15, 0xec, 0x8c, 0x21, 0x35,
	0x95, 0x7d, 0x74, 0xac, 0x96, 0x6d, 0x8e, 0x6e, 0xa7, 0x57, 0xd1, 0x0f, 0x73, 0xb7, 0x47, 0xd7,
	0x24, 0xbf, 0x96, 0xe0, 0xd9, 0x7a, 0x3b, 0x84, 0xb9, 0xbd, 0x87, 0x6e, 0xbf, 0xbb, 0xee, 0x26,
	0x41, 0xf7, 0x4f, 0x4a, 0xb7, 0x49, 0xd7, 0x24, 0xbf, 0x92, 0xe0, 0x78, 0x9d, 0x9d, 0xc2, 0x82,
	0x38, 0xc8, 0x2d, 0x7a, 0xd6, 0x46, 0xc0, 0x18, 0xd4, 0xb2, 0xed, 0xd2, 0x35, 0xc9, 0x6f, 0x24,
	0x38, 0x59, 0x6b, 0xd5, 0x59, 0x0c, 0x1f, 0x63, 0x0c, 0xdf, 0x5b, 0x7b, 0xe1, 0x31, 0x8a, 0xa7,
	0xe5, 0x4b, 0xdf, 0x35, 0xc9, 0x2b, 0x80, 0x01, 0x0d, 0x02, 0xcb, 0x73, 0xcf, 0xe8, 0x5c, 0x79,
	0x84, 0x8e, 0xee, 0x88, 0x3e, 0x13, 0x0b, 0x7a, 0x15, 0x3d, 0x01, 0x23, 0x2f, 0x61, 0xbb, 0xf3,
	0x15, 0x33, 0xa5, 0xd3, 0x9f, 0x29, 0x8f, 0x51, 0x67, 0x8f, 0xeb, 0xc4, 0xfc, 0x5e, 0x45, 0x5f,
	0x80, 0xc8, 0x0f, 0xa0, 0x1e, 0x11, 0x91, 0x73, 0xa5, 0x91, 0x3a, 0x1e, 0x49, 0x11, 0x3b, 0x1e,
	0x49, 0x9a, 0x7c, 0x02, 0xb7, 0x4c, 0xdb, 0xa2, 0x6e, 0xf8, 0x66, 0xa4, 0x3c, 0x68, 0x48, 0x27,
	0x9b, 0x7a, 0x4c, 0xb7, 0xb7, 0x61, 0xcb, 0xf4, 0xdc, 0x90, 0xba, 0xa1, 0x3a, 0x84, 0xdb, 0x03,
	0xea, 0x7f, 0xb0, 0x4c, 0xfa, 0xc6, 0x1d, 0x7b, 0x84, 0xc0, 0x86, 0x6b, 0x38, 0x54, 0x91, 0x1a,
	0xd2, 0xc9, 0xb6, 0x8e, 0xdf, 0xa4, 0x01, 0xb7, 0x47, 0x34, 0x30, 0x7d, 0x6b, 0x1a, 0x5a, 0x9e,
	0xab, 0xc8, 0x28, 0x4a, 0xb2, 0x98, 0xaf, 0xa9, 0xef, 0x7d, 0xb0, 0x46, 0xd4, 0x57, 0xaa, 0x28,
	0x8e, 0x69, 0x55, 0x85, 0x5a, 0x74, 0xdf, 0x11, 0x05, 0xb6, 0x06, 0x33, 0xd3, 0xa4, 0x41, 0x80,
	0xe6, 0x6f, 0xe9, 0x82, 0x54, 0x15, 0xa8, 0x45, 0x87, 0x9c, 0xec, 0x82, 0x7c, 0xa1, 0xa1, 0xb8,
	0xae, 0xcb, 0x17, 0x9a, 0xfa, 0x1c, 0xea, 0xc9, 0x26, 0xb0, 0x2c, 0x47, 0xba, 0x89, 0x21, 0x31,
	0xba, 0xa9, 0x3e, 0x84, 0x9d, 0xd4, 0x65, 0x49, 0xea, 0x20, 0xf5, 0x38, 0x5e, 0xea, 0xa9, 0x4d,
	0xd8, 0xcf, 0xba, 0x05, 0x19, 0xea, 0x42, 0xa0, 0x2e, 0x18, 0xa5, 0x73, 0x9b, 0x92, 0xae, 0x7e,
	0x1f, 0x76, 0xd3, 0x37, 0xfd, 0x2a, 0xfa, 0x52, 0xa0, 0x2f, 0x55, 0x15, 0x36, 0xce, 0x0d, 0xcb,
	0x67, 0xdc, 0x96, 0xc0, 0xb4, 0x18, 0xd5, 0x16, 0x98, 0xb6, 0xda, 0x86, 0x83, 0xec, 0xab, 0x6e,
	0xd5, 0x72, 0x4b, 0x68, 0x71, 0x1b, 0x55, 0x61, 0xa3, 0x01, 0x7b, 0xcb, 0xd7, 0x2f, 0x43, 0x5c,
	0x09, 0xed, 0x2b, 0xd5, 0x07, 0xf8, 0xd2, 0x32, 0xc2, 0xc1, 0x8d, 0xe1, 0x58, 0x3e, 0x39, 0x81,
	0x8f, 0x96, 0x9c, 0x71, 0xe4, 0x32, 0x9b, 0x3c, 0x80, 0xed, 0xce, 0x8d, 0x61, 0xdb, 0xd4, 0x9d,
	0x50, 0xee, 0x7d, 0xc1, 0x60, 0xd2, 0xd8, 0xa1, 0x52, 0x6d, 0x54, 0x99, 0x34, 0x66, 0xa8, 0x73,
	0xb8, 0xb3, 0xf0, 0xd9, 0xb2, 0x03, 0xaf, 0x4f, 0x27, 0xff, 0x3f, 0xd7, 0xdb, 0x49, 0xd7, 0xbf,
	0x93, 0x40, 0xc9, 0xbb, 0xe1, 0xc9, 0x13, 0x51, 0xd7, 0xbc, 0xe9, 0x8d, 0x95, 0xfb, 0x89, 0x28,
	0x77, 0x3e, 0xa8, 0xc5, 0x40, 0xd1, 0x2a, 0xe4, 0x83, 0xda, 0xea, 0x5f, 0x24, 0xf8, 0xb4, 0xb4,
	0xef, 0x66, 0xed, 0xe5, 0x96, 0x26, 0xf6, 0x72, 0x0b, 0xe9, 0xb6, 0xc6, 0x57, 0x5c, 0x6e, 0x8b,
	0xbd, 0xbe, 0x21, 0xf6, 0x3a, 0xe2, 0x9b, 0x38, 0x93, 0x32, 0x3c, 0xd2, 0xed, 0x26, 0x8e, 0x9a,
	0x0c, 0xdf, 0x8c, 0xb6, 0xf1, 0x16, 0xdf, 0xc6, 0x8c, 0x1a, 0xe0, 0x40, 0x58, 0xd7, 0xa5, 0x01,
	0x39, 0x80, 0x9a, 0x4e, 0x27, 0xac, 0x77, 0x6d, 0xe3, 0x79, 0xe5, 0x94, 0xfa, 0x37, 0x19, 0x9e,
	0xac, 0x71, 0x63, 0x90, 0xa3, 0x38, 0xf6, 0xdc, 0x3a, 0xb0, 0x94, 0x8e, 0xe2, 0x94, 0xf2, 0x61,
	0x2d, 0x84, 0xf1, 0x4c, 0xf3, 0x61, 0x6d, 0x84, 0xf1, 0x02, 0x14, 0x38, 0x6d, 0xa2, 0xd3, 0x66,
	0xe1, 0xac, 0x8e, 0xe5, 0x3a, 0x8a, 0xcb, 0x55, 0xe0, 0xf4, 0x7f, 0xab, 0xa2, 0x07, 0xf7, 0x73,
	0x6f, 0x7b, 0xd6, 0x2c, 0xdb, 0xb6, 0xe5, 0x8e, 0xe8, 0x48, 0x34, 0x88, 0x98, 0x4e, 0xc8, 0x44,
	0xbb, 0x88, 0xe9, 0x28, 0x90, 0x6a, 0x2a, 0x90, 0x0d, 0x1e, 0x88, 0xfa, 0x27, 0x09, 0x0e, 0x0b,
	0xe6, 0x0b, 0xa2, 0x2d, 0xf9, 0xcc, 0xcd, 0x78, 0x11, 0x8a, 0xb6, 0x14, 0x4a, 0xa9, 0x4a, 0x71,
	0x84, 0xbf, 0x95, 0xa0, 0x51, 0x36, 0x05, 0x90, 0x3d, 0xa8, 0x5e, 0x68, 0xe2, 0x48, 0xb0, 0xcf,
	0x88, 0x23, 0x1a, 0x3c, 0xfb, 0x44, 0x4e, 0x53, 0x1c, 0x0b, 0xf6, 0x19, 0x71, 0xc4, 0xc1, 0x60,
	0x9f, 0x51, 0xe3, 0xdc, 0x4c, 0x35, 0xce, 0x9a, 0x68, 0x9c, 0x7f, 0x90, 0x41, 0x2d, 0x1f, 0x47,
	0xc8, 0xf1, 0x22, 0x94, 0xdc, 0xcc, 0x31, 0xc2, 0xe3, 0x45, 0x84, 0x45, 0xc0, 0x26, 0x02, 0x9b,
	0x25, 0xbb, 0x1c, 0xf3, 0x39, 0x5e, 0xe4, 0x53, 0x04, 0x6c, 0x46, 0x0d, 0x6b, 0x73, 0x9d, 0x86,
	0x55, 0x2b, 0x69, 0x58, 0x3f, 0x85, 0x83, 0x95, 0xf1, 0x08, 0x6f, 0xf7, 0xa2, 0x7b, 0x8c, 0x0d,
	0x0b, 0x3d, 0x23, 0xb8, 0xe1, 0x6b, 0x81, 0xdf, 0xec, 0x48, 0x5c, 0xb5, 0xec, 0xe9, 0x8d, 0xc1,
	0xd7, 0x83, 0x53, 0xea, 0xef, 0x25, 0x50, 0xb2, 0x5d, 0x74, 0x3b, 0x51, 0x22, 0xd2, 0x3a, 0x89,
	0x14, 0xb7, 0xe7, 0xff, 0x2e, 0xa4, 0x7f, 0x4b, 0xe9, 0xac, 0x13, 0xc3, 0xd3, 0x53, 0xd8, 0x19,
	0x38, 0x86, 0x6d, 0xb7, 0xde, 0x7a, 0xa7, 0x86, 0xe3, 0x88, 0x0b, 0x2b, 0xcd, 0x8c, 0x51, 0x6d,
	0x81, 0x92, 0x13, 0x28, 0xc1, 0x64, 0x67, 0x3a, 0x36, 0x13, 0x85, 0x15, 0xd3, 0x78, 0xde, 0x85,
	0x6c, 0x83, 0x9f, 0x77, 0x21, 0xfb, 0x0c, 0xe4, 0xb7, 0x1a, 0x5f, 0xde, 0x87, 0x79, 0x33, 0x2c,
	0x56, 0x50, 0x97, 0xdf, 0x6a, 0x08, 0x17, 0xed, 0xac, 0x14, 0xde, 0x54, 0xff, 0x25, 0xa7, 0xd7,
	0x63, 0x91, 0x7c, 0xb7, 0x43, 0x3e, 0xcf, 0x4a, 0x3f, 0xb7, 0xec, 0x4b, 0x55, 0xf9, 0x3c, 0xab,
	0x2a, 0x25, 0xca, 0x71, 0xd2, 0xda, 0x52, 0xb1, 0xf2, 0xbb, 0x4e, 0x2b, 0xa1, 0x92, 0xaa, 0x61,
	0x41, 0xa3, 0x12, 0x2a, 0x2f, 0x12, 0xa5, 0x7d, 0x5c, 0x58, 0xab, 0x6e, 0x07, 0x8b, 0xfb, 0x22,
	0x51, 0xdc, 0x35, 0x14, 0x9a, 0xea, 0xdf, 0xa5, 0x74, 0x97, 0xc9, 0x79, 0x43, 0x2a, 0xb0, 0xf5,
	0x8d, 0x3f, 0xe9, 0x2f, 0x26, 0x6e, 0x41, 0xf2, 0xe1, 0x40, 0x5e, 0x1a, 0x74, 0xab, 0xf1, 0xe5,
	0x4f, 0x60, 0xa3, 0x3f, 0x77, 0x5a, 0x7c, 0xd7, 0xe0, 0x37, 0xe7, 0xb5, 0x79, 0xe7, 0xc3, 0x6f,
	0xf2, 0x05, 0x40, 0xe2, 0xfd, 0x90, 0xbf, 0x3d, 0x16, 0x20, 0x3d, 0xa1, 0xa0, 0xfe, 0x59, 0x86,
	0xa7, 0xeb, 0x3c, 0x9c, 0x0a, 0x32, 0x39, 0x8a, 0x33, 0x29, 0x1b, 0x15, 0x78, 0x82, 0x85, 0x97,
	0xfb, 0xb3, 0x44, 0xde, 0xb9, 0xc0, 0xa8, 0x1c, 0xcf, 0x12, 0xe5, 0x28, 0x84, 0xb6, 0xc9, 0x8f,
	0x33, 0xaa, 0xf4, 0xb8, 0xb0, 0x4a, 0xdd, 0x4e, 0xaa, 0x4e, 0xff, 0x94, 0xe1, 0x6e, 0x67, 0x70,
	0x6e, 0x58, 0xb6, 0x6d, 0x51, 0x7f, 0x40, 0x4d, 0x9f, 0x86, 0xec, 0xc9, 0x57, 0x07, 0xa9, 0x2f,
	0xda, 0x67, 0x9f, 0x51, 0xa7, 0xa2, 0x7d, 0x9e, 0xf2, 0x25, 0xae, 0x2e, 0x2d, 0x71, 0x6a, 0xbe,
	0xbb, 0x78, 0x25, 0xe6, 0xbb, 0x8b, 0x57, 0x64, 0x1f, 0x36, 0x5f, 0x7f, 0xe5, 0x4d, 0xce, 0xf9,
	0x5d, 0x16, 0x11, 0x82, 0x7b, 0xca, 0x67, 0x94, 0x88, 0x10, 0xdc, 0x9f, 0xf0, 0x59, 0x25, 0x22,
	0xc8, 0x4b, 0xb8, 0xfb, 0x9e, 0xfa, 0xd6, 0xd8, 0x32, 0xae, 0x6d, 0xda, 0x75, 0xa3, 0x7f, 0x2b,
	0xfb, 0x38, 0xbc, 0xd4, 0xf5, 0x2c, 0x11, 0x69, 0xc2, 0xfe, 0x2a, 0xfb, 0x54, 0xc3, 0x3f, 0xee,
	0xea, 0x7a, 0xa6, 0x2c, 0x5b, 0xa7, 0xa7, 0xe1, 0xbf, 0x71, 0x99, 0x3a, 0x3d, 0x8d, 0x55, 0xe6,
	0x4c, 0xa9, 0xe3, 0x33, 0x55, 0x3a, 0x63, 0x99, 0x9f, 0x69, 0xca, 0x0e, 0x92, 0xf2, 0x99, 0xa6,
	0xfe, 0x43, 0x86, 0xbd, 0x45, 0x75, 0xcf, 0x67, 0xd7, 0x6b, 0x94, 0xf6, 0x32, 0x2e, 0xed, 0x25,
	0x96, 0xf6, 0x32, 0x2e, 0xed, 0x25, 0x96, 0xf6, 0x32, 0x2e, 0xed, 0xe5, 0xb7, 0xb9, 0xb4, 0x6a,
	0xf2, 0x8f, 0x0c, 0x96, 0xdb, 0x07, 0xc3, 0x9e, 0x89, 0x33, 0x1c, 0x11, 0xea, 0x5f, 0xe5, 0xc4,
	0x1f, 0x17, 0x6c, 0xdc, 0xea, 0xcf, 0x1d, 0x31, 0xa4, 0xf5, 0xe7, 0x0e, 0x79, 0x04, 0x70, 0xe6,
	0x7a, 0x3f, 0x77, 0x5b, 0x61, 0xe8, 0x07, 0x8a, 0x8c, 0x8f, 0xc2, 0x04, 0x87, 0x3c, 0x07, 0xd2,
	0x89, 0xdf, 0xda, 0xc1, 0x37, 0xe3, 0x08, 0x17, 0x3d, 0x1e, 0x33, 0x24, 0xe4, 0x33, 0xb8, 0xd5,
	0x9f, 0x3b, 0x38, 0x93, 0xf1, 0x73, 0x2e, 0xfe, 0x5a, 0x59, 0x3c, 0x2e, 0xf5, 0x18, 0xc2, 0x12,
	0x7c, 0x27, 0xa6, 0xbd, 0x77, 0xe4, 0x25, 0xd4, 0xde, 0x45, 0xaa, 0xd1, 0x31, 0x56, 0x56, 0x54,
	0xf9, 0xbb, 0x54, 0xe7, 0x38, 0xf2, 0x35, 0x28, 0xab, 0x41, 0xa0, 0x28, 0x50, 0xb6, 0x1a, 0xd5,
	0x6c, 0xf7, 0xb9, 0x2a, 0xac, 0x86, 0x7d, 0xcf, 0x35, 0xa9, 0xd8, 0x1f, 0x48, 0xa8, 0x3f, 0x4a,
	0xff, 0x93, 0xb3, 0x3a, 0x57, 0x75, 0xc5, 0xee, 0xed, 0xb2, 0x0a, 0xbf, 0xd7, 0xe2, 0x11, 0xf7,
	0xbd, 0xa6, 0x5d, 0xd7, 0xd0, 0xff, 0xab, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x5f, 0x9a, 0x3a,
	0x58, 0xfe, 0x18, 0x00, 0x00,
}
