package commitments

import (
	"github.com/xlab-si/emmy/crypto/common"
	"github.com/xlab-si/emmy/crypto/dlog"
	"math/big"
	"crypto/rand"
	"fmt"
	"errors"
)

// RSABasedCommitter implements commitment scheme based on (RSA based) group homomorphism
// (scheme proposed by Cramer and Damgard).
type RSABasedCommitter struct {
	N *big.Int
	Q *big.Int
	Y *big.Int
	committedValue *big.Int
	r *big.Int
}

// NewRSABasedCommitter takes n, q, y parameters which are generated by RSABasedCommitReceiver.
func NewRSABasedCommitter(n, q, y *big.Int) (*RSABasedCommitter, error) {
	// y must be from Im(f) where f(x) = x^q mod n, that means gcd(y, n) must be 1:
	yIsValid := new(big.Int).GCD(nil, nil, y, n).Cmp(big.NewInt(1)) == 0
	if !yIsValid {
		return nil, fmt.Errorf("Y is not valid")
	}
	return &RSABasedCommitter{
		N: n,
		Q: q,
		Y: y,
	}, nil
}

func (committer *RSABasedCommitter) GetCommitMsg(a *big.Int) (*big.Int, error) {
	if a.Cmp(committer.Q) != -1 {
		err := errors.New("the committed value needs to be < Q")
		return nil, err
	}
	// Y^a * r^Q mod N, where r is random from Z_N*
	var r *big.Int
	for {
		r = common.GetRandomInt(committer.N)
		if new(big.Int).GCD(nil, nil, r, committer.N).Cmp(big.NewInt(1)) == 0 {
			break
		}
	}

	t1 := new(big.Int).Exp(committer.Y, a, committer.N)
	t2 := new(big.Int).Exp(r, committer.Q, committer.N)
	c := new(big.Int).Mul(t1, t2)
	c.Mod(c, committer.N)

	committer.committedValue = a
	committer.r = r
	return c, nil
}

func (committer *RSABasedCommitter) GetDecommitMsg() (*big.Int, *big.Int) {
	return committer.committedValue, committer.r
}

type RSABasedCommitReceiver struct {
	RSA *dlog.RSA
	Q *big.Int // Q prime, Q > n
	Y *big.Int
	x *big.Int
	commitment *big.Int
}

func NewRSABasedCommitReceiver(nBitLength int) (*RSABasedCommitReceiver, error) {
	rsa, err := dlog.NewRSA(nBitLength)
	if err != nil {
		return nil, err
	}
	q, err := rand.Prime(rand.Reader, rsa.N.BitLen() + 1)
	if err != nil {
		return nil, err
	}
	if q.Cmp(rsa.N) < 1 {
		return nil, fmt.Errorf("Q must be > N")
	}
	// gcd(q, phi(N)) is prime because q is prime and q > N > phi(N)
	// let's choose some x from Z_n*
	x, err := rand.Prime(rand.Reader, rsa.N.BitLen() - 1)
	if err != nil {
		return nil, err
	}
	g := new(big.Int)
	g.GCD(nil, nil, x, rsa.N)
	if g.Cmp(big.NewInt(1)) != 0 {
		return nil, fmt.Errorf("gcd(x, N) must be 1")
	}
	y := new(big.Int)
	y.Exp(x, q, rsa.N)

	return &RSABasedCommitReceiver{
		RSA: rsa,
		Q: q,
		Y: y,
		x: x,
	}, nil
}

// When receiver receives a commitment, it stores the value using SetCommitment method.
func (receiver *RSABasedCommitReceiver) SetCommitment(c *big.Int) {
	receiver.commitment = c
}

func (receiver *RSABasedCommitReceiver) CheckDecommitment(r, a *big.Int) bool {
	t1 := new(big.Int).Exp(receiver.Y, a, receiver.RSA.N)
	t2 := new(big.Int).Exp(r, receiver.Q, receiver.RSA.N)
	c := new(big.Int).Mul(t1, t2)
	c.Mod(c, receiver.RSA.N)

	var success bool
	if c.Cmp(receiver.commitment) == 0 {
		success = true
	} else {
		success = false
	}

	return success
}

